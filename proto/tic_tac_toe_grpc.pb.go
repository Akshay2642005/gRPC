// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/tic_tac_toe.proto

package gRPC

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TicTacToeService_CreateRoom_FullMethodName      = "/tictactoe.TicTacToeService/CreateRoom"
	TicTacToeService_JoinRoom_FullMethodName        = "/tictactoe.TicTacToeService/JoinRoom"
	TicTacToeService_PlaceMove_FullMethodName       = "/tictactoe.TicTacToeService/PlaceMove"
	TicTacToeService_StreamGameState_FullMethodName = "/tictactoe.TicTacToeService/StreamGameState"
)

// TicTacToeServiceClient is the client API for TicTacToeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicTacToeServiceClient interface {
	CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error)
	JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...grpc.CallOption) (*JoinRoomResponse, error)
	PlaceMove(ctx context.Context, in *PlaceMoveRequest, opts ...grpc.CallOption) (*GameState, error)
	StreamGameState(ctx context.Context, in *RoomRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GameState], error)
}

type ticTacToeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTicTacToeServiceClient(cc grpc.ClientConnInterface) TicTacToeServiceClient {
	return &ticTacToeServiceClient{cc}
}

func (c *ticTacToeServiceClient) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRoomResponse)
	err := c.cc.Invoke(ctx, TicTacToeService_CreateRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticTacToeServiceClient) JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...grpc.CallOption) (*JoinRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinRoomResponse)
	err := c.cc.Invoke(ctx, TicTacToeService_JoinRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticTacToeServiceClient) PlaceMove(ctx context.Context, in *PlaceMoveRequest, opts ...grpc.CallOption) (*GameState, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GameState)
	err := c.cc.Invoke(ctx, TicTacToeService_PlaceMove_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticTacToeServiceClient) StreamGameState(ctx context.Context, in *RoomRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GameState], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TicTacToeService_ServiceDesc.Streams[0], TicTacToeService_StreamGameState_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RoomRequest, GameState]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TicTacToeService_StreamGameStateClient = grpc.ServerStreamingClient[GameState]

// TicTacToeServiceServer is the server API for TicTacToeService service.
// All implementations must embed UnimplementedTicTacToeServiceServer
// for forward compatibility.
type TicTacToeServiceServer interface {
	CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error)
	JoinRoom(context.Context, *JoinRoomRequest) (*JoinRoomResponse, error)
	PlaceMove(context.Context, *PlaceMoveRequest) (*GameState, error)
	StreamGameState(*RoomRequest, grpc.ServerStreamingServer[GameState]) error
	mustEmbedUnimplementedTicTacToeServiceServer()
}

// UnimplementedTicTacToeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTicTacToeServiceServer struct{}

func (UnimplementedTicTacToeServiceServer) CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedTicTacToeServiceServer) JoinRoom(context.Context, *JoinRoomRequest) (*JoinRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinRoom not implemented")
}
func (UnimplementedTicTacToeServiceServer) PlaceMove(context.Context, *PlaceMoveRequest) (*GameState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceMove not implemented")
}
func (UnimplementedTicTacToeServiceServer) StreamGameState(*RoomRequest, grpc.ServerStreamingServer[GameState]) error {
	return status.Errorf(codes.Unimplemented, "method StreamGameState not implemented")
}
func (UnimplementedTicTacToeServiceServer) mustEmbedUnimplementedTicTacToeServiceServer() {}
func (UnimplementedTicTacToeServiceServer) testEmbeddedByValue()                          {}

// UnsafeTicTacToeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicTacToeServiceServer will
// result in compilation errors.
type UnsafeTicTacToeServiceServer interface {
	mustEmbedUnimplementedTicTacToeServiceServer()
}

func RegisterTicTacToeServiceServer(s grpc.ServiceRegistrar, srv TicTacToeServiceServer) {
	// If the following call pancis, it indicates UnimplementedTicTacToeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TicTacToeService_ServiceDesc, srv)
}

func _TicTacToeService_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacToeServiceServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicTacToeService_CreateRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacToeServiceServer).CreateRoom(ctx, req.(*CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicTacToeService_JoinRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacToeServiceServer).JoinRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicTacToeService_JoinRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacToeServiceServer).JoinRoom(ctx, req.(*JoinRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicTacToeService_PlaceMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceMoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacToeServiceServer).PlaceMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicTacToeService_PlaceMove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacToeServiceServer).PlaceMove(ctx, req.(*PlaceMoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicTacToeService_StreamGameState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RoomRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TicTacToeServiceServer).StreamGameState(m, &grpc.GenericServerStream[RoomRequest, GameState]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TicTacToeService_StreamGameStateServer = grpc.ServerStreamingServer[GameState]

// TicTacToeService_ServiceDesc is the grpc.ServiceDesc for TicTacToeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicTacToeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tictactoe.TicTacToeService",
	HandlerType: (*TicTacToeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoom",
			Handler:    _TicTacToeService_CreateRoom_Handler,
		},
		{
			MethodName: "JoinRoom",
			Handler:    _TicTacToeService_JoinRoom_Handler,
		},
		{
			MethodName: "PlaceMove",
			Handler:    _TicTacToeService_PlaceMove_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamGameState",
			Handler:       _TicTacToeService_StreamGameState_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/tic_tac_toe.proto",
}
